on:
  push:
    branches:
      - main  # Activar el flujo de trabajo solo en cambios al branch 'main'
  pull_request:
    branches:
      - main  # También activarse cuando se crea un pull request hacia 'main'

jobs:
  build:
    runs-on: ubuntu-latest
    
    steps:
    # Paso 1: Check-out del código fuente
    - name: Check out repository
      uses: actions/checkout@v3

    # Paso 2: Configurar Node.js
    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '16'  # Especifica la versión de Node.js

    # Paso 3: Instalar dependencias
    - name: Install dependencies
      run: |
        npm install

    # Paso 4: Ejecutar pruebas (si tienes pruebas)
    - name: Run tests
      run: |
        npm test

    # Paso 5: Construir la aplicación (opcional, dependiendo de tu app)
    - name: Build app
      run: |
        npm run build

  deploy:
    runs-on: ubuntu-latest
    needs: build  # Aseguramos que la build se haga antes del despliegue

    steps:
    # Paso 1: Check-out del código fuente
    - name: Check out repository
      uses: actions/checkout@v3

    # Paso 2: Instalar Docker
    - name: Set up Docker
      uses: docker/setup-buildx-action@v2

    # Paso 3: Iniciar el contenedor Docker para MySQL
    - name: Start MySQL container
      run: |
        docker run --name mysql-container -e MYSQL_ROOT_PASSWORD=Admin123 -e MYSQL_DATABASE=users -p 3306:3306 -d mysql:8

    # Paso 4: Construir la imagen Docker para la aplicación Node.js
    - name: Build Docker image
      run: |
        docker build -t my-nodejs-app .

    # Paso 5: Subir la imagen a Docker Hub (configurar tu Docker Hub previamente)
    - name: Push Docker image to Docker Hub
      env:
        DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
        DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
      run: |
        echo $DOCKER_PASSWORD | docker login -u $DOCKER_USERNAME --password-stdin
        docker tag my-nodejs-app thewadjet/backendtest:latest
        docker push thewadjet/backendtest:latest
